apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-build
  namespace: {{ .Values.namespace }}
spec:
  params:
  - description: Reference of the image buildah will produce.
    name: IMAGE
    type: string
  - default: 'docker.io/buildah/buildah'
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: overlay
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: 'true'
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    name: TLSVERIFY
    type: string
  - default: oci
    description: 'The format of the built container, oci or docker'
    name: FORMAT
    type: string
  - default: ''
    description: Extra parameters passed for the build command when building images.
    name: BUILD_EXTRA_ARGS
    type: string
  - default: ''
    description: Extra parameters passed for the push command when pushing images.
    name: PUSH_EXTRA_ARGS
    type: string
  - default: 'false'
    description: Skip pushing the built image
    name: SKIP_PUSH
    type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
    - description: Image repository where the built image would be pushed to
      name: IMAGE_URL
      type: string
  steps:
    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      resources: { }
      script: |
        ENTITLEMENT_VOLUME=""

        if [[ "$(workspaces.rhel-entitlement.bound)" == "true" ]]; then
          ENTITLEMENT_VOLUME="--volume /tmp/entitlement:/etc/pki/entitlement"
        fi

        buildah bud --storage-driver=$(params.STORAGE_DRIVER) \
          $ENTITLEMENT_VOLUME $(params.BUILD_EXTRA_ARGS) \
          --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) \
          -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

        if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

          # if config.json exists at workspace root, we use that
          if test -f "$(workspaces.dockerconfig.path)/config.json"; then
            export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

          # else we look for .dockerconfigjson at the root
          elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
            cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
            export DOCKER_CONFIG="$HOME/.docker"

          # need to error out if neither files are present
          else
            echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
            exit 1
          fi
        fi

        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile /tmp/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)
        cat /tmp/image-digest | tee $(results.IMAGE_DIGEST.path)
        echo -n "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: { }
      name: varlibcontainers
  workspaces:
    - name: source
    - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json or .dockerconfigjson.
      name: dockerconfig
      optional: true
    - description: An optional workspace that allows providing the entitlement keys for Buildah to access subscription. The mounted workspace contains entitlement.pem and entitlement-key.pem.
      mountPath: /tmp/entitlement
      name: rhel-entitlement
      optional: true
    - name: regcreds
      optional: true
